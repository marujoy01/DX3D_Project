#pragma once
#include "Engine_Defines.h"

//TODO 뭐하는 놈인데?
//! 유한상태머신(FSM)의 한계를 극복하고자 고안된 방법

//TODO 어떻게 쓰는데?

//! 트리의 구성요소는 셋으로 나뉜다
//! 루트노드, 컨트롤플로우 노드(루트도, 리프도아니다), 익스큐션노드(리프 노드. 태스트라고도 한다)
//! 깊이 우선 탐색 ( DFS )
//! 컨트롤 플로우노드는 자기 자신 노드 아래에 있는 서브트리(브랜치라고도 함)을 통해 표현되는 행동(서브 태스크)을 제어하는 것.
//! Selector 노드와 Sequence 노드가 이에 해당된다 



//! 보통은 Action(leaf Node), Selector, Sequance 3개의 노드를 기본적으로 가지고 있다.
//! 각 노드들은 자신의 상태를 반환해야한다.
//! 상태는 어떻게 구성하냐에 따라 다르다. 대부분 아래 3가지로 구성된다.
//! Fail(실패)
//! Running(동작 중) 다음 번에 Running을 반환한 노드가 다시 호출된다.
//! Success(성공)

//TODO Action 노드
//! 행동을 정의한 노드이다. 그렇기에 트리의 leaf node로 있어야한다.

//TODO Selector 노드
//! or 연산자와 동일한 기능을 하는 노드이다.
//! 자식 노드들을 왼쪽에서 오른쪽 순으로 진행한다.
//! 우선순위가 높은 자식 노드 일 수록 왼쪽에 배치하여야 한다.
//! 자식 노드들 중 성공한 노드가 있다면 그 노드를 실행하고 종료한다.
//! 여기서 성공이란 Success 와 Running을 뜻한다.
//! 여러 행동 중 하나만 실행해야 할 때를 생각하면 된다.
//! 예시로 서 있기, 눕기, 앉기 등이 있다.

//TODO Sequence 노드
//! and 연산자와 동일한 기능을 하는 노드이다.
//! 자식 노드들 중 실패한 노드가 있을 때 까지 진행한다.
//! 여러 행동을 순서대로 진행해야 할 때를 생각하면 된다.
//! 예시로 적 탐지 -> 적에게 이동 -> 공격 등이 있다.

//TODO 결론은 트리구조이다
//!위에서 아래로, 왼쪽에서 오른쪽 순으로 탐색한다.

BEGIN(Engine)

class CBTNode
{
public:
	virtual void Execute(class CBlackBoard& blackBoard) = 0;
};

END
